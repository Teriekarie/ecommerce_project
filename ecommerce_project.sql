-- CREATE DATABASE e_commerce;

USE e_commerce;

-- Create Customers table
CREATE TABLE Customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone_number VARCHAR(15),
    address TEXT
);

-- Create Products table
CREATE TABLE Products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(100) NOT NULL,
    category VARCHAR(50),
    price DECIMAL(10, 2) NOT NULL,
    stock_quantity INT DEFAULT 0
);

-- Create Orders table
CREATE TABLE Orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Create Order_Items table
CREATE TABLE Order_Items (
    order_item_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- Step 3: Populating the Tables
INSERT INTO Customers (name, email, phone_number, address)
VALUES
('Alice Smith', 'alice@example.com', '123-456-7890', '123 Maple St, Springfield, IL'),
('Bob Jones', 'bob@example.com', '987-654-3210', '456 Oak St, Metropolis, NY'),
('Charlie Brown', 'charlie@example.com', '555-555-5555', '789 Pine St, Gotham, NJ'),
('Diana Prince', 'diana@example.com', '222-333-4444', '101 Amazon Way, Themyscira, WW'),
('Bruce Wayne', 'bruce@example.com', '999-888-7777', '100 Wayne Manor, Gotham, NJ'),
('Clark Kent', 'clark@example.com', '111-222-3333', '202 Smallville Ln, Smallville, KS'),
('Lois Lane', 'lois@example.com', '444-555-6666', '303 Daily Planet Ave, Metropolis, NY'),
('Peter Parker', 'peter@example.com', '777-888-9999', '404 Web St, Queens, NY'),
('Tony Stark', 'tony@example.com', '666-777-8888', '505 Stark Tower, Manhattan, NY'),
('Steve Rogers', 'steve@example.com', '555-111-2222', '606 Shield Ln, Brooklyn, NY');


INSERT INTO Products (product_name, category, price, stock_quantity)
VALUES
('Laptop', 'Electronics', 1200.00, 10),
('Phone', 'Electronics', 800.00, 20),
('Headphones', 'Accessories', 150.00, 30),
('Keyboard', 'Accessories', 100.00, 25),
('Monitor', 'Electronics', 300.00, 15),
('Chair', 'Furniture', 200.00, 20),
('Desk', 'Furniture', 400.00, 10),
('Mouse', 'Accessories', 50.00, 40),
('Tablet', 'Electronics', 500.00, 12),
('Smartwatch', 'Electronics', 250.00, 18);


INSERT INTO Order_Items (order_id, product_id, quantity, price)
VALUES
(1, 1, 1, 1200.00),
(1, 2, 1, 800.00),
(2, 3, 4, 600.00),
(2, 5, 1, 300.00),
(3, 4, 8, 800.00),
(3, 7, 2, 400.00),
(4, 1, 1, 1200.00),
(4, 6, 2, 400.00),
(5, 2, 2, 1600.00),
(5, 8, 5, 250.00),
(6, 9, 1, 500.00),
(6, 10, 1, 250.00),
(7, 5, 3, 900.00),
(7, 4, 2, 200.00),
(8, 3, 6, 900.00),
(8, 7, 3, 600.00),
(9, 6, 1, 200.00),
(9, 8, 1, 50.00),
(10, 9, 1, 500.00),
(10, 1, 1, 1200.00),
(11, 2, 1, 800.00),
(11, 5, 2, 600.00),
(12, 3, 4, 600.00),
(12, 7, 3, 600.00),
(13, 4, 5, 500.00),
(13, 9, 1, 500.00),
(14, 1, 2, 2400.00),
(14, 10, 2, 500.00),
(15, 5, 3, 900.00),
(15, 7, 1, 200.00),
(16, 2, 1, 800.00),
(16, 6, 1, 200.00),
(17, 1, 1, 1200.00),
(17, 8, 2, 100.00),
(18, 9, 1, 500.00),
(18, 4, 1, 100.00),
(19, 7, 3, 600.00),
(19, 3, 4, 600.00),
(20, 10, 1, 250.00),
(20, 2, 2, 1600.00);

SELECT COUNT(*) FROM Customers;
SELECT * FROM Customers;

SELECT COUNT(*) FROM Products;
SELECT * FROM Products;

SELECT COUNT(*) FROM Orders; 
SELECT * FROM Orders;

SELECT COUNT(*) FROM Order_Items; 
SELECT * FROM order_Items;

-- 1. Add a New Customer to the Database
INSERT INTO Customers (name, email, phone_number, address)
VALUES ('Jane Doe', 'jane.doe@example.com', '555-444-3333', '789 Elm St, Rivertown, TX');

SELECT * FROM Customers WHERE email = 'jane.doe@example.com';

-- 2. Update the Stock Quantity of a Product After a Purchase
UPDATE Products
SET stock_quantity = stock_quantity - 2
WHERE product_id = 1;

SELECT product_name, stock_quantity
FROM Products
WHERE product_id = 1;

--  Delete an Order from the Database
DELETE FROM Order_Items
WHERE order_id = 10;

DELETE FROM Orders
WHERE order_id = 10;

SELECT * FROM Orders WHERE order_id = 10;
SELECT * FROM Order_Items WHERE order_id = 10;

SELECT o.order_id, o.order_date, o.total_amount
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id
WHERE c.name = 'Alice Smith';

-- Revenue Analysis
-- 1. Calculate the Total Revenue Generated by the E-Commerce Platform
SELECT SUM(total_amount) AS total_revenue
FROM Orders;

-- 2. Find the Revenue Generated Per Product
SELECT 
    p.product_name,
    SUM(oi.quantity * oi.price) AS revenue_generated
FROM Order_Items oi
JOIN Products p ON oi.product_id = p.product_id
GROUP BY p.product_name
ORDER BY revenue_generated DESC;

-- Customer Insights:
-- 1. List the Top 5 Customers by Total Spending
SELECT 
    c.name AS customer_name,
    SUM(o.total_amount) AS total_spent
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.name
ORDER BY total_spent DESC
LIMIT 5;

-- 2. Identify Customers Who Havenâ€™t Made Any Purchases
SELECT 
    c.name AS customer_name, 
    c.email
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;

-- Product Trends
-- 1. Find the Top 3 Best-Selling Products
SELECT 
    p.product_name,
    SUM(oi.quantity) AS total_sold
FROM Order_Items oi
JOIN Products p ON oi.product_id = p.product_id
GROUP BY p.product_name
ORDER BY total_sold DESC
LIMIT 3;

-- 2. Identify Products That Are Out of Stock
SELECT 
    product_name
FROM Products
WHERE stock_quantity = 0;

-- Order Details
-- 1. Retrieve All Items in a Specific Order
SELECT 
    oi.order_item_id,
    p.product_name,
    oi.quantity,
    oi.price
FROM Order_Items oi
JOIN Products p ON oi.product_id = p.product_id
WHERE oi.order_id = 1;

-- 2. Calculate the Total Amount of an Order
SELECT 
    oi.order_id,
    SUM(oi.quantity * oi.price) AS total_amount
FROM Order_Items oi
WHERE oi.order_id = 1
GROUP BY oi.order_id;

-- Monthly Trends
-- 1. Calculate the Number of Orders and Total Revenue for Each Month
SELECT 
    DATE_FORMAT(order_date, '%Y-%m') AS order_month,
    COUNT(order_id) AS total_orders,
    SUM(total_amount) AS total_revenue
FROM Orders
GROUP BY DATE_FORMAT(order_date, '%Y-%m')
ORDER BY order_month;

-- Task 4: Advanced SQL Concepts
-- 1. Joins
-- a. INNER JOIN
SELECT 
    c.name AS customer_name,
    o.order_id,
    o.total_amount
FROM Customers c
INNER JOIN Orders o ON c.customer_id = o.customer_id;

-- b. LEFT JOIN
SELECT 
    c.name AS customer_name,
    o.order_id,
    o.total_amount
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id;

-- c. FULL JOIN
SELECT 
    c.name AS customer_name,
    o.order_id,
    o.total_amount
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id

UNION

SELECT 
    c.name AS customer_name,
    o.order_id,
    o.total_amount
FROM Customers c
RIGHT JOIN Orders o ON c.customer_id = o.customer_id;

-- 2. Window Functions
-- a. RANK() to Rank Customers by Total Spending

SELECT VERSION();
WITH CustomerSpending AS (
    SELECT 
        c.name AS customer_name,
        SUM(o.total_amount) AS total_spent
    FROM Customers c
    JOIN Orders o ON c.customer_id = o.customer_id
    GROUP BY c.name
)
SELECT 
    customer_name,
    total_spent,
    RANK() OVER (ORDER BY total_spent DESC) AS customer_rank
FROM CustomerSpending;

-- b. ROW_NUMBER() to Assign a Unique Number to Each Order
SELECT 
    o.order_id,
    c.name AS customer_name,
    ROW_NUMBER() OVER (PARTITION BY c.customer_id ORDER BY o.order_date) AS order_row_number
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id;

-- 1. Using a Common Table Expression (CTE) to Calculate Total Revenue Per Customer
WITH CustomerRevenue AS (
    SELECT 
        c.customer_id,
        c.name AS customer_name,
        SUM(o.total_amount) AS total_revenue
    FROM Customers c
    JOIN Orders o ON c.customer_id = o.customer_id
    GROUP BY c.customer_id, c.name
)
SELECT 
    customer_name,
    total_revenue
FROM CustomerRevenue
WHERE total_revenue > 500;

-- 2. Subquery to Find the Product with the Highest Price
SELECT 
    product_name, 
    price
FROM Products
WHERE price = (SELECT MAX(price) FROM Products);

-- Indexing in SQL
CREATE INDEX idx_customer_id ON Orders(customer_id);

CREATE INDEX idx_product_id ON Order_Items(product_id);

-- Measuring Performance Before and After Indexing
EXPLAIN SELECT * 
FROM Orders 
WHERE customer_id = 1;

-- example
EXPLAIN SELECT * 
FROM Orders 
WHERE customer_id = 1;

-- Demonstrating the Impact of Indexing
SELECT * 
FROM Order_Items 
WHERE product_id = 101;

-- Task 5: Optimization
-- Analyze Query Performance
SELECT o.order_id, o.order_date, o.total_amount
FROM Orders o
WHERE o.customer_id = 1;

-- Analyze Using EXPLAIN:
EXPLAIN SELECT o.order_id, o.order_date, o.total_amount
FROM Orders o
WHERE o.customer_id = 1;

-- Optimize the Query
-- a. Analyze Query After Adding Index
EXPLAIN SELECT o.order_id, o.order_date, o.total_amount
FROM Orders o
WHERE o.customer_id = 1;

-- Adjust Join Order for Efficiency
SELECT o.order_id, c.name AS customer_name, o.total_amount
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id
WHERE o.total_amount > 1000;

EXPLAIN SELECT o.order_id, c.name AS customer_name, o.total_amount
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id
WHERE o.total_amount > 1000;

-- Optimization: Filter Data Early
SELECT o.order_id, c.name AS customer_name, o.total_amount
FROM (SELECT order_id, customer_id, total_amount
      FROM Orders
      WHERE total_amount > 1000) o
JOIN Customers c ON o.customer_id = c.customer_id;

-- Rewrite Queries for Efficiency
SELECT p.product_name, SUM(oi.quantity * oi.price) AS total_sales
FROM Products p
JOIN Order_Items oi ON p.product_id = oi.product_id
GROUP BY p.product_id;

-- Analyze Performance:
EXPLAIN SELECT p.product_name, SUM(oi.quantity * oi.price) AS total_sales
FROM Products p
JOIN Order_Items oi ON p.product_id = oi.product_id
GROUP BY p.product_id;

-- Optimization: Use Index and Subqueries

SELECT p.product_name, (
    SELECT SUM(oi.quantity * oi.price)
    FROM Order_Items oi
    WHERE oi.product_id = p.product_id
) AS total_sales
FROM Products p;





